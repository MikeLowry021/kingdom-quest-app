{"extracted_information": "The provided content from W3C's ARIA Authoring Practices Guide (APG) details comprehensive guidelines for developing keyboard interfaces, managing focus, utilizing ARIA patterns, and ensuring screen reader compatibility. It covers fundamental principles, specific techniques for component interaction, and strategies for assigning keyboard shortcuts while avoiding conflicts.", "specifications": {"keyboard_navigation_principles": ["Authors must provide keyboard support for GUI components made accessible with ARIA, as browsers do not automatically.", "Guidance aims for efficient and enjoyable keyboard experiences.", "Focus movement conventions in ARIA design patterns."], "focus_management": {"discernible_predictable_keyboard_focus": {"visibility_of_focus_indicator": "Users must easily distinguish the keyboard focus indicator. Advised to rely on browser defaults or ensure custom indicators are distinct and persist in high contrast modes. Must distinguish between focus and selection.", "persistence_of_focus": "Always a component within UI that is active (`document.activeElement` not null/body). Active element must have a visual focus indicator. Authors manage events to keep focus visible and logical (e.g., after closing a dialog or deleting an item).", "predictability_of_movement": "Usability influenced by guessing where focus lands. Approaches: match reading order (e.g., left-to-right, top-to-bottom), incorporate all section elements before moving to next section, avoid perceived backward movement for large jumps, follow consistent patterns across a site. Do not set initial focus on page load unless for single primary function or frequently used pages.", "focus_vs_selection": "Focus is a pointer (`document.activeElement`). Selection (`aria-selected=\"true\"`) is an operation in some widgets. Only one point of focus at any time. Selection can be single or multiple. Selected state persists when focus leaves a widget. Visual focus indicator must always be visible; selected state must be visually distinct from focus."}, "selection_follows_focus": {"considerations": "In composite widgets where only one element can be selected (e.g., tablist, single-select listbox), moving focus may also cause selection to follow focus. Beneficial if instantaneous (e.g., panel content present in DOM). Detrimental if network requests or page refreshes occur, causing latency and re-focusing issues. When selection does not follow focus, user presses `Enter` or `Space` to change selection."}, "keyboard_navigation_between_components_tab_sequence": {"reachability": "All interactive UI components reachable via keyboard (in tab sequence or accessible from a component in tab sequence).", "tabindex_attribute": {"not_present_or_invalid": "Default focus behavior (HTML: links, form elements included; macOS: only form elements unless system preferences changed).", "tabindex_0": "Element included in tab sequence based on DOM position.", "tabindex_-1": "Element not included in tab sequence but focusable with `element.focus()`.", "tabindex_X_1_to_32767": "STRONGLY ADVISED NOT to use. Element placed in tab sequence based on value. Elements with `tabindex=\"0\"` and default focusable elements come after elements with `tabindex > 0`.", "alignment": "DOM order determines default tab sequence and screen reader reading order. Must be aligned, logical, and predictable. Robust manipulation method is rearranging elements in the DOM."}}, "keyboard_navigation_inside_components": {"composite_component_focus": "Tab sequence includes only one focusable element of a composite UI component. Inside composite, keys other than `Tab`/`Shift`+`Tab` move focus. Authors advised to use key bindings consistent with common GUI operating systems (APG Patterns).", "focus_landing_convention_in_composite": ["Last focused element (or first if no prior focus): e.g., grid, tree grid.", "Selected element (or first if no selection): e.g., radio groups (checked radio button), tabs, list boxes, trees.", "First element: e.g., menubars, toolbars."], "managing_focus_strategies": {"roving_tabindex": {"description": "`tabindex=\"0\"` on the element in tab sequence, `tabindex=\"-1\"` on all others. Algorithm: On load, set `tabindex=\"0\"` for initial element, `-1` for others. When navigation key pressed: set `tabindex=\"-1\"` on current `0`, set `tabindex=\"0\"` on new element, call `element.focus()` on new `0`. When composite loses focus, ensure target element has `tabindex=\"0\"` for next entry.", "benefit": "User agent scrolls newly focused element into view."}, "aria_activedescendant": {"description": "For component containers with ARIA roles supporting `aria-activedescendant`, only container needs to be in tab sequence. `aria-activedescendant` on container tells AT which element is active. ATs consider referenced element focused. ATs receive focus change events when `aria-activedescendant` value changes. Steps: Container in tab sequence; `aria-activedescendant=\"IDREF\"` on container. When container receives DOM focus, draw visual indicator on active element and scroll into view. When navigation key pressed: change `aria-activedescendant` value, move visual indicator, scroll into view. When composite loses focus, ensure `aria-activedescendant` refers to desired target element.", "restrictions": "Referenced element must be a DOM descendant of focused referencing element, OR focused referencing element has `aria-owns` property including ID of referenced element, OR focused referencing element has `combobox`/`textbox`/`searchbox` role and `aria-controls` property referring to an element with role that supports `aria-activedescendant` AND referenced element is descendant of controlled element or controlled element has `aria-owns`."}}}, "focusability_of_disabled_controls": {"default_behavior": "Disabled HTML input elements removed from tab sequence.", "common_expectation": "Disabled interactive elements not focusable.", "exceptions_keep_focusable": "Inside composite widgets (e.g., menu, listbox), disabled items may be focusable (e.g., when navigating with arrow keys).", "guidelines": ["For elements in tab sequence when enabled, remove from tab sequence when disabled.", "Keep focusable when disabled for: Options in Listbox, Menu items in Menu/Menubar, Tab elements in Tabs, Tree items in Tree View.", "For toolbar elements, make focusable if discoverability is a concern (e.g., 'smart paste' functions where presence on toolbar is primary discovery)."], "mitigation": "Appropriate keyboard shortcuts can mitigate impact of including disabled elements in keyboard path."}}, "aria_patterns": {"usage": "Used with `aria-activedescendant` for focus management, `aria-selected=\"true\"` for distinguishing selected state, and implied by reference to APG patterns for component key bindings."}, "screen_reader_compatibility_guidelines": {"reading_order_alignment": "Keyboard tab sequence and screen reader reading order must be aligned, logical, and predictable (DOM order).", "focus_visibility_for_sr": "Preventing focus from moving to disabled elements can hide their presence from screen reader users who 'see' by moving focus.", "impact_of_selection_follows_focus": "Detrimental if network requests cause latency; efficient if instantaneous (allows efficient reading of list).", "keyboard_shortcuts_confirmation": "Activation shortcuts without moving focus (e.g., 'Save' for listbox) provide confirmation of action for screen reader users and enable efficient multi-command execution."}, "keyboard_shortcuts": {"purpose": "Enhance usability of frequently used features (focus, activate, or both).", "design_scope_behavior": {"augmentation_not_replacement": "Shortcuts enhance, not replace, standard keyboard access. All features must be keyboard accessible without shortcuts. Essential for discovery and full access (not all devices support shortcuts).", "shortcut_behaviors": ["Navigation: Move focus (e.g., to text box, toolbar, composite, page section).", "Activation: Perform operation without moving focus (target context is where focus currently is; common for command buttons, non-visible functions like 'Save').", "Navigation and Activation: Both move focus and activate (target has single function and context is same as target; typical for buttons opening menus/dialogs, checkboxes, navigation links/buttons)."], "efficiency_cognitive_load": "Lack of shortcut reduces efficiency; too many shortcuts increase cognitive load and clutter."}, "assignment_considerations": {"learnability": "Easy to learn/remember (mnemonics, logical/spacial patterns).", "localization": "Consider key availability, behavior, language impact on mnemonics.", "conflict_avoidance": "Ideal to avoid conflicts with OS, browser, AT keys. Strategies to mitigate impact when conflicts are unavoidable.", "key_conflicts": {"meta_key_definition": "`Windows` key on Windows/Linux, `Command` key on macOS.", "operating_system_conflicts": "Avoid: Any modifier + `Tab`, `Enter`, `Space`, `Escape`. `Meta` key + any other single key (risky). `Alt` + function key. Also avoid conflicts with application-level features like Zoom, Copy/Paste.", "assistive_technology_conflicts": "Relatively easy to avoid. ATs use specific keys as modifiers (e.g., `Caps Lock`). Avoid: `Caps Lock` + any combination. `Insert` + any combination. `Scroll Lock` + any combination. macOS only: `Control` + `Option` + any combination.", "browser_conflicts": "More difficult due to less homogenous patterns. Avoid conflicts with heavily used functions: Address/location bar, Notification bar, Page refresh, Bookmark/history functions, Find functions.", "intentional_conflicts": "Acceptable when: web app has frequently used function similar to browser function, users will often use app function, rarely use browser function, efficient alternative path to browser function exists."}}, "exposure_documentation": "To be written in a future section (issue 219). All elements targeted by shortcuts must be focusable via keyboard; revealing key assignments on the element itself."}}, "pricing": {}, "features": [], "statistics": {}, "temporal_info": {}, "geographical_data": {"key_assignment_conventions": {"windows_linux_keys": [{"function": "open context menu", "key": "`Shift` + `F10`"}, {"function": "Copy to clipboard", "key": "`Control` + `C`"}, {"function": "Paste from clipboard", "key": "`Control` + `V`"}, {"function": "Cut to clipboard", "key": "`Control` + `X`"}, {"function": "undo last action", "key": "`Control` + `Z`"}, {"function": "Redo action", "key": "`Control` + `Y`"}], "macos_keys": [{"function": "open context menu", "key": ""}, {"function": "Copy to clipboard", "key": "`Command` + `C`"}, {"function": "Paste from clipboard", "key": "`Command` + `V`"}, {"function": "Cut to clipboard", "key": "`Command` + `X`"}, {"function": "undo last action", "key": "`Command` + `Z`"}, {"function": "Redo action", "key": "`Command` + `Shift` + `Z`"}]}, "macos_specifics": "In macOS, default tab key only includes form elements unless system preferences enable all focusable elements. `Control` + `Option` + any key combination to be avoided for AT conflicts."}, "references": ["https://github.com/w3c/aria-practices/issues/217", "../../patterns/", "https://html.spec.whatwg.org/multipage/interaction.html#the-tabindex-attribute", "https://www.w3.org/TR/SVG2/struct.html#tabindexattribute", "https://w3c.github.io/aria/#aria-activedescendant", "../../patterns/menubar/", "../../patterns/listbox/", "../../patterns/tabs/", "../../patterns/treeview/", "https://github.com/w3c/aria-practices/issues/219", "https://w3c.github.io/aria/#aria-owns", "https://w3c.github.io/aria/#combobox", "https://w3c.github.io/aria/#textbox", "https://w3c.github.io/aria/#searchbox", "https://w3c.github.io/aria/#aria-controls"]}